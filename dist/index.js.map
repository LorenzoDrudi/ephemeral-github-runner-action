{"version":3,"file":"index.js","mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACTA;;;;;;;;AAAA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["../webpack://javascript-action/./wait.js","../webpack://javascript-action/../../../../.nvm/versions/node/v16.3.0/lib/node_modules/@vercel/ncc/dist/ncc/@@notfound.js","../webpack://javascript-action/webpack/bootstrap","../webpack://javascript-action/webpack/runtime/compat","../webpack://javascript-action/./index.js"],"sourcesContent":["let wait = function (milliseconds) {\n  return new Promise((resolve) => {\n    if (typeof milliseconds !== 'number') {\n      throw new Error('milliseconds not a number');\n    }\n    setTimeout(() => resolve(\"done!\"), milliseconds)\n  });\n};\n\nmodule.exports = wait;\n",null,"// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","const core = require('@actions/core'); \nconst shell = require('shelljs');\nconst wait = require('./wait');\n\nasync function run() {\n  // Get all the inputs needed\n  const configPath = core.getInput('pulumi-config-path');\n  const pulumiGoal = core.getInput('pulumi-goal');\n  const stackName = core.getInput('pulumi-stack-name');\n  const cloudProvider = core.getInput('pulumi-cloud-provider');\n  const pulumiBackendUrl = core.getInput('pulumi-backend-url');\n  const cloudArch = core.getInput('cloud-architecture');\n  const appID=core.getInput('app-id'); \n  const appPrivateKey = core.getInput('app-private-key');\n  const pulumiConfigPassphrase = core.getInput('pulumi-config-passphrase');\n  const awsAccessKey = core.getInput('aws-access-key');\n  const awsSecretAccessKey = core.getInput('aws-secret-access-key');\n  const awsRegion = core.getInput('aws-region');\n  \n  // const pulumiAccessToken = core.getInput('pulumi-access-token');\n\n  console.log(`Path: ${configPath} ${pulumiGoal} ${stackName} ${cloudProvider} ${cloudArch}`);\n\n  // Get the JSON webhook payload for the event that triggered the workflow\n  // const payload = JSON.stringify(github.context.payload, undefined, 2)\n  // console.log(`The event payload: ${payload}`);\n\n  // Simple check on provider and arch, we don't support gcp with an arm64 arch\n  // TODO: use enumerated values\n  core.info(\"Checking the inputs...\");\n  if (!(cloudProvider.toLowerCase() == 'aws' || cloudProvider.toLowerCase() == 'gcp')) {\n    core.setFailed(\"Wrong provider\");\n  } else if (!(cloudArch.toLowerCase() == 'arm64' || cloudArch.toLowerCase() == 'amd64')) {\n    core.setFailed(\"Wrong arch\");\n  } else if (cloudProvider.toLowerCase() == 'gcp' && cloudArch.toLowerCase() == 'arm64') {\n    core.setFailed(\"GCP doesn't have arm machines\");\n  }\n  core.info(\"Check passed!\");\n\n  // Clone the repo and install the dependencies\n  core.info(\"Cloning the repo and installing the dependencies...\");\n  shell.exec(`git clone https://github.com/pavlovic-ivan/ephemeral-github-runner.git`);\n  shell.cd(`ephemeral-github-runner`);\n  shell.exec(`npm ci`);\n\n  // Export the env variable we need in our environment\n  core.info(\"Setting up env variables...\");\n  shell.env[\"APP_ID\"]=appID;\n  shell.env[\"APP_PRIVATE_KEY\"]=appPrivateKey;\n  shell.env[\"PULUMI_BACKEND_URL\"]=pulumiBackendUrl;\n  shell.env[\"PULUMI_CONFIG_PASSPHRASE\"]=pulumiConfigPassphrase;\n  shell.env[\"AWS_ACCESS_KEY_ID\"]=awsAccessKey;\n  shell.env[\"AWS_SECRET_ACCESS_KEY\"]=awsSecretAccessKey;\n  shell.env[\"AWS_REGION\"]=awsRegion;\n  // Skip the update check \n  shell.env[\"PULUMI_SKIP_UPDATE_CHECK\"]=\"true\";\n  shell.env[\"PULUMI_SKIP_CONFIRMATIONS\"]=\"true\";\n  shell.env[\"PULUMI_CREDENTIALS_PATH\"]=\"/home/runner/.pulumi\";\n\n  // shell.env[\"PULUMI_ACCESS_TOKEN\"]=pulumiAccessToken;\n\n  shell.exec(`printenv`);\n  shell.exec(`pulumi login ${pulumiBackendUrl}`);\n  core.info(\"Deploying the runners...\");\n  shell.cd(`${cloudProvider}`);\n  shell.exec(`pulumi stack init ${stackName} --secrets-provider=passphrase`);\n  shell.exec(`pulumi stack select ${stackName}`);\n  shell.exec(`pulumi stack ls`);\n  shell.exec(`pulumi update --diff --config-file ${configPath}`);\n  core.info(\"Runners deployed!\");\n\n  core.info(\"Waiting some time\");\n  wait(1000);  \n\n  core.info(\"Destroying the runners\");\n  shell.exec(`pulumi stack select ${stackName}`);\n  shell.exec(`pulumi destroy --config-file ${configPath}`);\n  shell.exec(`pulumi stack rm ${stackName}`);\n  core.info(\"Job finished\");\n}\n\nrun();\n"],"names":[],"sourceRoot":""}